q
min(q)
g = function(m, n) pbinom(m, n, 0.5) - pbinom(n-m-1, n, 0.5)
v = g(1:10, 10)
w = which(v>0.95)
min(w)
n = 10
res = array()
for (i in 1:10){
m <- i
res <- c(res, pbinom(m, n, 0.5) - pbinom(n-m-1, n, 0.5))
}
res
q <- which(res>0.95)
q
min(q)
n = 100
res = array()
for (i in 1:10){
m <- i
res <- c(res, pbinom(m, n, 0.5) - pbinom(n-m-1, n, 0.5))
}
res
q <- which(res>0.95)
q
min(q)
n = 100
res = array()
for (i in 1:100){
m <- i
res <- c(res, pbinom(m, n, 0.5) - pbinom(n-m-1, n, 0.5))
}
res
q <- which(res>0.95)
q
min(q)
n = 1000
res = array()
for (i in 1:1000){
m <- i
res <- c(res, pbinom(m, n, 0.5) - pbinom(n-m-1, n, 0.5))
}
res
q <- which(res>0.95)
q
min(q)
n = 1000
res = array()
for (i in 1:1000){
m <- i
res <- c(res, pbinom(m, n, 0.5) - pbinom(n-m-1, n, 0.5))
}
res
q <- which(res>0.95)
q
min(q)
n = 10
res = array()
for (i in 1:10){
m <- i
res <- c(res, pbinom(m, n, 0.5) - pbinom(n-m-1, n, 0.5))
}
res
q <- which(res>0.95)
q
min(q)
n = 10
res = array()
for (i in 1:10){
m <- i
res <- c(res, pbinom(m, n, 0.5) - pbinom(n-m-1, n, 0.5))
}
res
q <- which(res>0.95)
q
min(q)
n = 10
res = array()
for (i in 1:10){
m <- i
res <- c(res, pbinom(m, n, 0.5) - pbinom(n-m-1, n, 0.5))
}
res
q <- which(res>0.95)
q
min(q)
n = 10
res = array()
for (i in 1:10){
m <- i
res <- c(res, pbinom(m, n, 0.5) - pbinom(n-m-1, n, 0.5))
}
res
q <- which(res>0.95)
q
min(q)
set.seed(1)
n = 10
res = array()
for (i in 1:10){
m <- i
res <- c(res, pbinom(m, n, 0.5) - pbinom(n-m-1, n, 0.5))
}
res
q <- which(res>0.95)
q
min(q)
set.seed(1)
n = 10
res = array()
for (i in 1:10){
m <- i
res <- c(res, pbinom(m, n, 0.5) - pbinom(n-m-1, n, 0.5))
}
res
q <- which(res>0.95)
q
min(q)
set.seed(1)
n = 10
res = array()
for (i in 1:10){
m <- i
res <- c(res, pbinom(m, n, 0.5) - pbinom(n-m-1, n, 0.5))
}
res
q <- which(res>0.95)
q
min(q)
set.seed(1)
n = 10
res = array()
for (i in 1:10){
m <- i
res <- c(res, pbinom(m, n, 0.5) - pbinom(n-m-1, n, 0.5))
}
res
q <- which(res>0.95)
min(q)
set.seed(1)
n = 100
res = array()
for (i in 1:100){
m <- i
res <- c(res, pbinom(m, n, 0.5) - pbinom(n-m-1, n, 0.5))
}
res
q <- which(res>0.95)
min(q)
set.seed(1)
n = 1000
res = array()
for (i in 1:1000){
m <- i
res <- c(res, pbinom(m, n, 0.5) - pbinom(n-m-1, n, 0.5))
}
res
q <- which(res>0.95)
min(q)
library(plotly)
install.packages(c("boot", "foreign", "KernSmooth", "mgcv", "nlme", "purrr"))
install.packages("data.table")
library(plotly)
### Import data into an R dataframe. Note the seperator is a ";" instead of a ","
library(stringr)
cars <- read.csv("~/Downloads/world indicators exercise.csv", sep=";")
cars$Manufacturer <- as.factor(str_split_fixed(cars$Car, " ", 2)[,1])
View(cars)
### Gather summary statistics for each column
summary(cars)
### We can create some more specialized metrics like a weighted mean MPG given Horsepower
mean(cars[["MPG"]])
weighted.mean(cars[["MPG"]], w=cars[["Horsepower"]])
### Cross Tab
library(descr)
x_tab <- CrossTable(cars$Model, cars$Origin, prop.c = FALSE, prop.chisq = FALSE, prop.t = FALSE)
x_tab
### We can then create some visualizations to allow us to understand the various distributions of variables in our dataset
quantile(cars[['Horsepower']])
IQR(cars[['Horsepower']])
boxplot(cars)
boxplot(cars[['Horsepower']], ylab="Horsepower")
boxplot(MPG ~ Origin, data = cars)
### Frequency
breaks <- seq(from=min(cars['MPG']), to=max(cars['MPG']), length=11)
mpg_freq <- cut(cars[['MPG']], breaks = breaks, right=TRUE, include.lowest = TRUE)
View(table(mpg_freq))
hist(cars[['MPG']], breaks=breaks, xlab = 'MPG')
hist(cars$Horsepower, xlab = 'Horsepower', freq=FALSE)
lines(density(cars$Horsepower), lwd=3, col="blue")
### Barplot
barplot(table(cars$Origin))
agg <- aggregate(cars$MPG, by= list(Origin = cars$Origin), FUN = mean)
plot(agg)
barplot(agg$x, names = agg$Origin)
### Scatter Plots
plot(cars$MPG,cars$Horsepower)
plot(cars$MPG,cars$Horsepower, col='red')
### Scatter with Curve Fitting
plot(cars$MPG,cars$Horsepower)
lines(lowess(cars$MPG,cars$Horsepower))
scatter.smooth(cars$MPG,cars$Horsepower)
### Scatter Plot Matrix
pairs(cars)
plot(cars)
### Correlation
library(corrplot)
df_car <- subset(cars, select = -c(Car, Origin, Manufacturer))
cor(df_car)
corrplot(cor(df_car), method = 'ellipse')
### Density --- ggplot
library(ggplot2)
library(hexbin)
ggplot(data=cars, aes(Horsepower, MPG)) + stat_binhex(colour = 'black') + theme_bw() +
scale_fill_gradient(low = 'white', high = 'black') + labs(x="Origin", y="MPG")
ggplot(data=cars, aes(Horsepower, MPG)) + theme_bw() + geom_point(alpha = 0.5) +
geom_density2d(colour = 'red') + labs(x="Horsepower", y="MPG")
ggplot(data=subset(cars, Origin %in% c('Europe', 'Japan')), aes(x=Horsepower, y=MPG)) +
stat_binhex(colour = 'black') +
theme_bw() +
scale_fill_gradient(low = 'white', high = 'blue') +
labs(x="Origin", y="MPG") +
facet_wrap("Origin")
### Violin
ggplot(data=cars, aes(Origin, MPG)) + geom_violin() + labs(x="Origin", y="MPG")
#### Interactivity ####
# https://plot.ly/r/
library(plotly)
### Scatter
scatter <- plot_ly(data = cars, x = ~MPG, y = ~Horsepower)
scatter
### Scatter 2
color_scatter <- plot_ly(data = cars, x = ~MPG, y = ~Horsepower, color = ~Origin)
color_scatter
### Contour Plot
cont <- plot_ly(cars, x = ~MPG, y = ~Horsepower) %>%
add_trace(type='histogram2dcontour')
cont
### Box Plot
box <- plot_ly(cars, x = ~MPG, color = ~Origin, type = "box", text = ~Manufacturer)
box
### Histogram
hist <- plot_ly(cars, x = ~MPG, type = "histogram")
hist
### Combinations
plot <- plot_ly(cars, x = ~MPG, y = ~Horsepower)
comb_plot <- subplot(
plot %>% add_markers(alpha = 0.5),
plot %>% add_histogram2d()
)
comb_plot
### Sub-Plots
sub <- subplot(
plot_ly(x =cars$MPG, color = I("black"), type = 'histogram'),
plotly_empty(),
plot_ly(x = cars$MPG, y = cars$Horsepower, type = 'histogram2dcontour', showscale = F),
plot_ly(y =cars$Horsepower, color = I("black"), type = 'histogram'),
nrows = 2, heights = c(0.2, 0.8), widths = c(0.8, 0.2),
shareX = TRUE, shareY = TRUE, titleX = FALSE, titleY = FALSE
)
dual_cont <- layout(sub, showlegend = FALSE)
dual_cont
### Aggregation
agg_plot <- plot_ly(
type = 'bar',
x = cars$Origin,
y = cars$MPG,
transforms = list(
list(
type = 'aggregate',
groups = cars$Origin,
aggregations = list(
list(
target = 'y', func = 'avg', enabled = T
)
)
)
)
)
agg_plot
agg_plot2 <- plot_ly(
type = 'scatter',
x = cars$Horsepower,
y = cars$MPG,
mode = 'markers',
text = cars$Manufacturer,
transforms = list(
list(
type = 'aggregate',
groups = cars$Manufacturer,
aggregations = list(
list(
target = 'y', func = 'avg', enabled = T
),
list(
target = 'x', func = 'avg', enabled = T
)
)
)
)
)
agg_plot2
### Map
df <- read.csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_us_cities.csv')
df$q <- with(df, cut(pop, quantile(pop)))
levels(df$q) <- paste(c("1st", "2nd", "3rd", "4th", "5th"), "Quantile")
df$q <- as.ordered(df$q)
geo <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray85"),
subunitwidth = 1,
countrywidth = 1,
subunitcolor = toRGB("white"),
countrycolor = toRGB("white")
)
plot <- plot_geo(df, locationmode = 'USA-states', sizes = c(1, 250)) %>%
add_markers(
x = ~lon, y = ~lat, size = ~pop, color = ~q, hoverinfo = "text",
text = ~paste(df$name, "<br />", df$pop/1e6, " million")
) %>%
layout(title = '2014 US city populations<br>(Click legend to toggle)', geo = geo)
plot
### Time Series
today <- Sys.Date()
tm <- seq(0, 600, by = 10)
x <- today - tm
y <- rnorm(length(x))
series <- plot_ly(x = ~x, y = ~y, mode = 'lines', text = paste(tm, "days from today"))
series
### Enabling Online
# https://plot.ly/r/getting-started/
# https://moderndata.plot.ly/time-series-charts-by-the-economist-in-r-using-plotly/
### Import data into an R dataframe. Note the seperator is a ";" instead of a ","
library(stringr)
cars <- read.csv("~/Downloads/original cars.csv", sep=";")
cars$Manufacturer <- as.factor(str_split_fixed(cars$Car, " ", 2)[,1])
View(cars)
### Gather summary statistics for each column
summary(cars)
### We can create some more specialized metrics like a weighted mean MPG given Horsepower
mean(cars[["MPG"]])
weighted.mean(cars[["MPG"]], w=cars[["Horsepower"]])
### Cross Tab
library(descr)
x_tab <- CrossTable(cars$Model, cars$Origin, prop.c = FALSE, prop.chisq = FALSE, prop.t = FALSE)
x_tab
### We can then create some visualizations to allow us to understand the various distributions of variables in our dataset
quantile(cars[['Horsepower']])
IQR(cars[['Horsepower']])
boxplot(cars)
boxplot(cars[['Horsepower']], ylab="Horsepower")
boxplot(MPG ~ Origin, data = cars)
### Frequency
breaks <- seq(from=min(cars['MPG']), to=max(cars['MPG']), length=11)
mpg_freq <- cut(cars[['MPG']], breaks = breaks, right=TRUE, include.lowest = TRUE)
View(table(mpg_freq))
hist(cars[['MPG']], breaks=breaks, xlab = 'MPG')
hist(cars$Horsepower, xlab = 'Horsepower', freq=FALSE)
lines(density(cars$Horsepower), lwd=3, col="blue")
### Barplot
barplot(table(cars$Origin))
agg <- aggregate(cars$MPG, by= list(Origin = cars$Origin), FUN = mean)
plot(agg)
barplot(agg$x, names = agg$Origin)
### Scatter Plots
plot(cars$MPG,cars$Horsepower)
plot(cars$MPG,cars$Horsepower, col='red')
### Scatter with Curve Fitting
plot(cars$MPG,cars$Horsepower)
lines(lowess(cars$MPG,cars$Horsepower))
scatter.smooth(cars$MPG,cars$Horsepower)
### Scatter Plot Matrix
pairs(cars)
plot(cars)
### Correlation
library(corrplot)
df_car <- subset(cars, select = -c(Car, Origin, Manufacturer))
cor(df_car)
corrplot(cor(df_car), method = 'ellipse')
### Density --- ggplot
library(ggplot2)
library(hexbin)
ggplot(data=cars, aes(Horsepower, MPG)) + stat_binhex(colour = 'black') + theme_bw() +
scale_fill_gradient(low = 'white', high = 'black') + labs(x="Origin", y="MPG")
ggplot(data=cars, aes(Horsepower, MPG)) + theme_bw() + geom_point(alpha = 0.5) +
geom_density2d(colour = 'red') + labs(x="Horsepower", y="MPG")
ggplot(data=subset(cars, Origin %in% c('Europe', 'Japan')), aes(x=Horsepower, y=MPG)) +
stat_binhex(colour = 'black') +
theme_bw() +
scale_fill_gradient(low = 'white', high = 'blue') +
labs(x="Origin", y="MPG") +
facet_wrap("Origin")
### Violin
ggplot(data=cars, aes(Origin, MPG)) + geom_violin() + labs(x="Origin", y="MPG")
#### Interactivity ####
# https://plot.ly/r/
library(plotly)
### Scatter
scatter <- plot_ly(data = cars, x = ~MPG, y = ~Horsepower)
scatter
### Scatter 2
color_scatter <- plot_ly(data = cars, x = ~MPG, y = ~Horsepower, color = ~Origin)
color_scatter
### Contour Plot
cont <- plot_ly(cars, x = ~MPG, y = ~Horsepower) %>%
add_trace(type='histogram2dcontour')
cont
### Box Plot
box <- plot_ly(cars, x = ~MPG, color = ~Origin, type = "box", text = ~Manufacturer)
box
### Histogram
hist <- plot_ly(cars, x = ~MPG, type = "histogram")
hist
### Combinations
plot <- plot_ly(cars, x = ~MPG, y = ~Horsepower)
comb_plot <- subplot(
plot %>% add_markers(alpha = 0.5),
plot %>% add_histogram2d()
)
comb_plot
### Sub-Plots
sub <- subplot(
plot_ly(x =cars$MPG, color = I("black"), type = 'histogram'),
plotly_empty(),
plot_ly(x = cars$MPG, y = cars$Horsepower, type = 'histogram2dcontour', showscale = F),
plot_ly(y =cars$Horsepower, color = I("black"), type = 'histogram'),
nrows = 2, heights = c(0.2, 0.8), widths = c(0.8, 0.2),
shareX = TRUE, shareY = TRUE, titleX = FALSE, titleY = FALSE
)
dual_cont <- layout(sub, showlegend = FALSE)
dual_cont
### Aggregation
agg_plot <- plot_ly(
type = 'bar',
x = cars$Origin,
y = cars$MPG,
transforms = list(
list(
type = 'aggregate',
groups = cars$Origin,
aggregations = list(
list(
target = 'y', func = 'avg', enabled = T
)
)
)
)
)
agg_plot
agg_plot2 <- plot_ly(
type = 'scatter',
x = cars$Horsepower,
y = cars$MPG,
mode = 'markers',
text = cars$Manufacturer,
transforms = list(
list(
type = 'aggregate',
groups = cars$Manufacturer,
aggregations = list(
list(
target = 'y', func = 'avg', enabled = T
),
list(
target = 'x', func = 'avg', enabled = T
)
)
)
)
)
agg_plot2
### Map
df <- read.csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_us_cities.csv')
df$q <- with(df, cut(pop, quantile(pop)))
levels(df$q) <- paste(c("1st", "2nd", "3rd", "4th", "5th"), "Quantile")
df$q <- as.ordered(df$q)
geo <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray85"),
subunitwidth = 1,
countrywidth = 1,
subunitcolor = toRGB("white"),
countrycolor = toRGB("white")
)
plot <- plot_geo(df, locationmode = 'USA-states', sizes = c(1, 250)) %>%
add_markers(
x = ~lon, y = ~lat, size = ~pop, color = ~q, hoverinfo = "text",
text = ~paste(df$name, "<br />", df$pop/1e6, " million")
) %>%
layout(title = '2014 US city populations<br>(Click legend to toggle)', geo = geo)
plot
### Time Series
today <- Sys.Date()
tm <- seq(0, 600, by = 10)
x <- today - tm
y <- rnorm(length(x))
series <- plot_ly(x = ~x, y = ~y, mode = 'lines', text = paste(tm, "days from today"))
series
### Enabling Online
# https://plot.ly/r/getting-started/
# https://moderndata.plot.ly/time-series-charts-by-the-economist-in-r-using-plotly/
install.packages(c("rJava", "RJDBC", "sqldf"))
product_feature_extraction(data,'wallis');
library(shiny); runApp('Downloads/PCA_Proteomics.R')
setwd("~/Documents/GitHub/DATA511A-CancerPrevention")
runApp('~/Downloads/PCA_Proteomics.R')
runApp('PCA_Proteomics.R')
runApp('PCA_Proteomics.R')
